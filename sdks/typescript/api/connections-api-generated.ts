/* tslint:disable */
/* eslint-disable */
/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { BrokerageAuthorization } from '../models';
// @ts-ignore
import { BrokerageAuthorizationDisabledConfirmation } from '../models';
// @ts-ignore
import { BrokerageAuthorizationRefreshConfirmation } from '../models';
// @ts-ignore
import { ConnectionsSessionEvents200ResponseInner } from '../models';
// @ts-ignore
import { Model401FailedRequestResponse } from '../models';
// @ts-ignore
import { Model402BrokerageAuthAlreadyDisabledException } from '../models';
// @ts-ignore
import { Model402BrokerageAuthDisabledResponse } from '../models';
// @ts-ignore
import { Model403FeatureNotEnabledResponse } from '../models';
// @ts-ignore
import { Model404FailedRequestResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ConnectionsApi - axios parameter creator
 * @export
 */
export const ConnectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a single brokerage authorization object for the specified ID.
         * @summary Get brokerage authorization details
         * @param {string} authorizationId The ID of a brokerage authorization object.
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailBrokerageAuthorization: async (authorizationId: string, userId: string, userSecret: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationId' is not null or undefined
            assertParamExists('detailBrokerageAuthorization', 'authorizationId', authorizationId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('detailBrokerageAuthorization', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('detailBrokerageAuthorization', 'userSecret', userSecret)
            const localVarPath = `/authorizations/{authorizationId}`
                .replace(`{${"authorizationId"}}`, encodeURIComponent(String(authorizationId !== undefined ? authorizationId : `-authorizationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/authorizations/{authorizationId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Manually disable a connection. This should only be used for testing a reconnect flow, and never used on production connections. Will trigger a disconnect as if it happened naturally, and send a CONNECTION_BROKEN webhook for the connection. Please contact us in order to use this endpoint as it is disabled by default.
         * @summary Manually disable a connection for testing
         * @param {string} authorizationId The ID of a brokerage authorization object.
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableBrokerageAuthorization: async (authorizationId: string, userId: string, userSecret: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationId' is not null or undefined
            assertParamExists('disableBrokerageAuthorization', 'authorizationId', authorizationId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('disableBrokerageAuthorization', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('disableBrokerageAuthorization', 'userSecret', userSecret)
            const localVarPath = `/authorizations/{authorizationId}/disable`
                .replace(`{${"authorizationId"}}`, encodeURIComponent(String(authorizationId !== undefined ? authorizationId : `-authorizationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/authorizations/{authorizationId}/disable',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Brokerage Authorization objects for the user
         * @summary List all brokerage authorizations for the User
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBrokerageAuthorizations: async (userId: string, userSecret: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('listBrokerageAuthorizations', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('listBrokerageAuthorizations', 'userSecret', userSecret)
            const localVarPath = `/authorizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/authorizations',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Trigger a holdings update for all accounts under this authorization. Updates will be queued asynchronously. ACCOUNT_HOLDINGS_UPDATED webhook will be sent once the sync completes. Please contact support for access as this endpoint is not enabled by default
         * @summary Refresh holdings for a connection
         * @param {string} authorizationId The ID of a brokerage authorization object.
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshBrokerageAuthorization: async (authorizationId: string, userId: string, userSecret: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationId' is not null or undefined
            assertParamExists('refreshBrokerageAuthorization', 'authorizationId', authorizationId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('refreshBrokerageAuthorization', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('refreshBrokerageAuthorization', 'userSecret', userSecret)
            const localVarPath = `/authorizations/{authorizationId}/refresh`
                .replace(`{${"authorizationId"}}`, encodeURIComponent(String(authorizationId !== undefined ? authorizationId : `-authorizationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/authorizations/{authorizationId}/refresh',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a specified brokerage authorization given by the ID.
         * @summary Delete brokerage authorization
         * @param {string} authorizationId The ID of the Authorization to delete.
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBrokerageAuthorization: async (authorizationId: string, userId: string, userSecret: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorizationId' is not null or undefined
            assertParamExists('removeBrokerageAuthorization', 'authorizationId', authorizationId)
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('removeBrokerageAuthorization', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('removeBrokerageAuthorization', 'userSecret', userSecret)
            const localVarPath = `/authorizations/{authorizationId}`
                .replace(`{${"authorizationId"}}`, encodeURIComponent(String(authorizationId !== undefined ? authorizationId : `-authorizationId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/authorizations/{authorizationId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of session events associated with a user.
         * @summary Get all session events for a user
         * @param {string} partnerClientId 
         * @param {string} [userId] Optional comma separated list of user IDs used to filter the request on specific users
         * @param {string} [sessionId] Optional comma separated list of session IDs used to filter the request on specific users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionEvents: async (partnerClientId: string, userId?: string, sessionId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'partnerClientId' is not null or undefined
            assertParamExists('sessionEvents', 'partnerClientId', partnerClientId)
            const localVarPath = `/sessionEvents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (partnerClientId !== undefined) {
                localVarQueryParameter['PartnerClientId'] = partnerClientId;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (sessionId !== undefined) {
                localVarQueryParameter['sessionId'] = sessionId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/sessionEvents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConnectionsApi - functional programming interface
 * @export
 */
export const ConnectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConnectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a single brokerage authorization object for the specified ID.
         * @summary Get brokerage authorization details
         * @param {ConnectionsApiDetailBrokerageAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async detailBrokerageAuthorization(requestParameters: ConnectionsApiDetailBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrokerageAuthorization>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.detailBrokerageAuthorization(requestParameters.authorizationId, requestParameters.userId, requestParameters.userSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Manually disable a connection. This should only be used for testing a reconnect flow, and never used on production connections. Will trigger a disconnect as if it happened naturally, and send a CONNECTION_BROKEN webhook for the connection. Please contact us in order to use this endpoint as it is disabled by default.
         * @summary Manually disable a connection for testing
         * @param {ConnectionsApiDisableBrokerageAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async disableBrokerageAuthorization(requestParameters: ConnectionsApiDisableBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrokerageAuthorizationDisabledConfirmation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.disableBrokerageAuthorization(requestParameters.authorizationId, requestParameters.userId, requestParameters.userSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Brokerage Authorization objects for the user
         * @summary List all brokerage authorizations for the User
         * @param {ConnectionsApiListBrokerageAuthorizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBrokerageAuthorizations(requestParameters: ConnectionsApiListBrokerageAuthorizationsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BrokerageAuthorization>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listBrokerageAuthorizations(requestParameters.userId, requestParameters.userSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Trigger a holdings update for all accounts under this authorization. Updates will be queued asynchronously. ACCOUNT_HOLDINGS_UPDATED webhook will be sent once the sync completes. Please contact support for access as this endpoint is not enabled by default
         * @summary Refresh holdings for a connection
         * @param {ConnectionsApiRefreshBrokerageAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshBrokerageAuthorization(requestParameters: ConnectionsApiRefreshBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrokerageAuthorizationRefreshConfirmation>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshBrokerageAuthorization(requestParameters.authorizationId, requestParameters.userId, requestParameters.userSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a specified brokerage authorization given by the ID.
         * @summary Delete brokerage authorization
         * @param {ConnectionsApiRemoveBrokerageAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeBrokerageAuthorization(requestParameters: ConnectionsApiRemoveBrokerageAuthorizationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeBrokerageAuthorization(requestParameters.authorizationId, requestParameters.userId, requestParameters.userSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of session events associated with a user.
         * @summary Get all session events for a user
         * @param {ConnectionsApiSessionEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sessionEvents(requestParameters: ConnectionsApiSessionEventsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConnectionsSessionEvents200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sessionEvents(requestParameters.partnerClientId, requestParameters.userId, requestParameters.sessionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConnectionsApi - factory interface
 * @export
 */
export const ConnectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConnectionsApiFp(configuration)
    return {
        /**
         * Returns a single brokerage authorization object for the specified ID.
         * @summary Get brokerage authorization details
         * @param {ConnectionsApiDetailBrokerageAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        detailBrokerageAuthorization(requestParameters: ConnectionsApiDetailBrokerageAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<BrokerageAuthorization> {
            return localVarFp.detailBrokerageAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Manually disable a connection. This should only be used for testing a reconnect flow, and never used on production connections. Will trigger a disconnect as if it happened naturally, and send a CONNECTION_BROKEN webhook for the connection. Please contact us in order to use this endpoint as it is disabled by default.
         * @summary Manually disable a connection for testing
         * @param {ConnectionsApiDisableBrokerageAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        disableBrokerageAuthorization(requestParameters: ConnectionsApiDisableBrokerageAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<BrokerageAuthorizationDisabledConfirmation> {
            return localVarFp.disableBrokerageAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Brokerage Authorization objects for the user
         * @summary List all brokerage authorizations for the User
         * @param {ConnectionsApiListBrokerageAuthorizationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBrokerageAuthorizations(requestParameters: ConnectionsApiListBrokerageAuthorizationsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<BrokerageAuthorization>> {
            return localVarFp.listBrokerageAuthorizations(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Trigger a holdings update for all accounts under this authorization. Updates will be queued asynchronously. ACCOUNT_HOLDINGS_UPDATED webhook will be sent once the sync completes. Please contact support for access as this endpoint is not enabled by default
         * @summary Refresh holdings for a connection
         * @param {ConnectionsApiRefreshBrokerageAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshBrokerageAuthorization(requestParameters: ConnectionsApiRefreshBrokerageAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<BrokerageAuthorizationRefreshConfirmation> {
            return localVarFp.refreshBrokerageAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a specified brokerage authorization given by the ID.
         * @summary Delete brokerage authorization
         * @param {ConnectionsApiRemoveBrokerageAuthorizationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeBrokerageAuthorization(requestParameters: ConnectionsApiRemoveBrokerageAuthorizationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.removeBrokerageAuthorization(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of session events associated with a user.
         * @summary Get all session events for a user
         * @param {ConnectionsApiSessionEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sessionEvents(requestParameters: ConnectionsApiSessionEventsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ConnectionsSessionEvents200ResponseInner>> {
            return localVarFp.sessionEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for detailBrokerageAuthorization operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiDetailBrokerageAuthorizationRequest
 */
export type ConnectionsApiDetailBrokerageAuthorizationRequest = {
    
    /**
    * The ID of a brokerage authorization object.
    * @type {string}
    * @memberof ConnectionsApiDetailBrokerageAuthorization
    */
    readonly authorizationId: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiDetailBrokerageAuthorization
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiDetailBrokerageAuthorization
    */
    readonly userSecret: string
    
}

/**
 * Request parameters for disableBrokerageAuthorization operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiDisableBrokerageAuthorizationRequest
 */
export type ConnectionsApiDisableBrokerageAuthorizationRequest = {
    
    /**
    * The ID of a brokerage authorization object.
    * @type {string}
    * @memberof ConnectionsApiDisableBrokerageAuthorization
    */
    readonly authorizationId: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiDisableBrokerageAuthorization
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiDisableBrokerageAuthorization
    */
    readonly userSecret: string
    
}

/**
 * Request parameters for listBrokerageAuthorizations operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiListBrokerageAuthorizationsRequest
 */
export type ConnectionsApiListBrokerageAuthorizationsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiListBrokerageAuthorizations
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiListBrokerageAuthorizations
    */
    readonly userSecret: string
    
}

/**
 * Request parameters for refreshBrokerageAuthorization operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiRefreshBrokerageAuthorizationRequest
 */
export type ConnectionsApiRefreshBrokerageAuthorizationRequest = {
    
    /**
    * The ID of a brokerage authorization object.
    * @type {string}
    * @memberof ConnectionsApiRefreshBrokerageAuthorization
    */
    readonly authorizationId: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiRefreshBrokerageAuthorization
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiRefreshBrokerageAuthorization
    */
    readonly userSecret: string
    
}

/**
 * Request parameters for removeBrokerageAuthorization operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiRemoveBrokerageAuthorizationRequest
 */
export type ConnectionsApiRemoveBrokerageAuthorizationRequest = {
    
    /**
    * The ID of the Authorization to delete.
    * @type {string}
    * @memberof ConnectionsApiRemoveBrokerageAuthorization
    */
    readonly authorizationId: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiRemoveBrokerageAuthorization
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiRemoveBrokerageAuthorization
    */
    readonly userSecret: string
    
}

/**
 * Request parameters for sessionEvents operation in ConnectionsApi.
 * @export
 * @interface ConnectionsApiSessionEventsRequest
 */
export type ConnectionsApiSessionEventsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ConnectionsApiSessionEvents
    */
    readonly partnerClientId: string
    
    /**
    * Optional comma separated list of user IDs used to filter the request on specific users
    * @type {string}
    * @memberof ConnectionsApiSessionEvents
    */
    readonly userId?: string
    
    /**
    * Optional comma separated list of session IDs used to filter the request on specific users
    * @type {string}
    * @memberof ConnectionsApiSessionEvents
    */
    readonly sessionId?: string
    
}

/**
 * ConnectionsApiGenerated - object-oriented interface
 * @export
 * @class ConnectionsApiGenerated
 * @extends {BaseAPI}
 */
export class ConnectionsApiGenerated extends BaseAPI {
    /**
     * Returns a single brokerage authorization object for the specified ID.
     * @summary Get brokerage authorization details
     * @param {ConnectionsApiDetailBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public detailBrokerageAuthorization(requestParameters: ConnectionsApiDetailBrokerageAuthorizationRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).detailBrokerageAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Manually disable a connection. This should only be used for testing a reconnect flow, and never used on production connections. Will trigger a disconnect as if it happened naturally, and send a CONNECTION_BROKEN webhook for the connection. Please contact us in order to use this endpoint as it is disabled by default.
     * @summary Manually disable a connection for testing
     * @param {ConnectionsApiDisableBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public disableBrokerageAuthorization(requestParameters: ConnectionsApiDisableBrokerageAuthorizationRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).disableBrokerageAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Brokerage Authorization objects for the user
     * @summary List all brokerage authorizations for the User
     * @param {ConnectionsApiListBrokerageAuthorizationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public listBrokerageAuthorizations(requestParameters: ConnectionsApiListBrokerageAuthorizationsRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).listBrokerageAuthorizations(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Trigger a holdings update for all accounts under this authorization. Updates will be queued asynchronously. ACCOUNT_HOLDINGS_UPDATED webhook will be sent once the sync completes. Please contact support for access as this endpoint is not enabled by default
     * @summary Refresh holdings for a connection
     * @param {ConnectionsApiRefreshBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public refreshBrokerageAuthorization(requestParameters: ConnectionsApiRefreshBrokerageAuthorizationRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).refreshBrokerageAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a specified brokerage authorization given by the ID.
     * @summary Delete brokerage authorization
     * @param {ConnectionsApiRemoveBrokerageAuthorizationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public removeBrokerageAuthorization(requestParameters: ConnectionsApiRemoveBrokerageAuthorizationRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).removeBrokerageAuthorization(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of session events associated with a user.
     * @summary Get all session events for a user
     * @param {ConnectionsApiSessionEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConnectionsApiGenerated
     */
    public sessionEvents(requestParameters: ConnectionsApiSessionEventsRequest, options?: AxiosRequestConfig) {
        return ConnectionsApiFp(this.configuration).sessionEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
