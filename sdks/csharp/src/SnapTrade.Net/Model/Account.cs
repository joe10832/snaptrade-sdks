/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// A single account at a brokerage.
    /// </summary>
    [DataContract(Name = "Account")]
    public partial class Account : IEquatable<Account>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Account" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade. This ID should not change for as long as the connection stays active. If the connection is deleted and re-added, a new account ID will be generated..</param>
        /// <param name="brokerageAuthorization">Unique identifier for the connection (brokerage authorization). This is the UUID used to reference the connection in SnapTrade..</param>
        /// <param name="portfolioGroup">Portfolio Group ID. Portfolio Groups have been deprecated. Please contact support if you have a usecase for it..</param>
        /// <param name="name">A display name for the account. Either assigned by the user or by the brokerage itself. For certain brokerages, SnapTrade appends the brokerage name to the account name for clarity..</param>
        /// <param name="number">The account number assigned by the brokerage. For some brokerages, this field may be masked for security reasons..</param>
        /// <param name="institutionName">The name of the brokerage that holds the account..</param>
        /// <param name="createdDate">Timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format indicating when the account was created in SnapTrade. This is _not_ the account opening date at the brokerage..</param>
        /// <param name="meta">Additional information about the account, such as account type, status, etc. This information is specific to the brokerage and there&#39;s no standard format for this data. Please use at your own risk..</param>
        /// <param name="cashRestrictions">This field is deprecated..</param>
        /// <param name="syncStatus">syncStatus.</param>
        /// <param name="balance">balance.</param>
        public Account(string id = default(string), string brokerageAuthorization = default(string), string portfolioGroup = default(string), string name = default(string), string number = default(string), string institutionName = default(string), DateTime createdDate = default(DateTime), Dictionary<string, Object> meta = default(Dictionary<string, Object>), List<string> cashRestrictions = default(List<string>), AccountSyncStatus syncStatus = default(AccountSyncStatus), AccountBalance balance = default(AccountBalance)) : base()
        {
            this.Id = id;
            this.BrokerageAuthorization = brokerageAuthorization;
            this.PortfolioGroup = portfolioGroup;
            this.Name = name;
            this.Number = number;
            this.InstitutionName = institutionName;
            this.CreatedDate = createdDate;
            this.Meta = meta;
            this.CashRestrictions = cashRestrictions;
            this.SyncStatus = syncStatus;
            this.Balance = balance;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade. This ID should not change for as long as the connection stays active. If the connection is deleted and re-added, a new account ID will be generated.
        /// </summary>
        /// <value>Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade. This ID should not change for as long as the connection stays active. If the connection is deleted and re-added, a new account ID will be generated.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Unique identifier for the connection (brokerage authorization). This is the UUID used to reference the connection in SnapTrade.
        /// </summary>
        /// <value>Unique identifier for the connection (brokerage authorization). This is the UUID used to reference the connection in SnapTrade.</value>
        [DataMember(Name = "brokerage_authorization", EmitDefaultValue = false)]
        public string BrokerageAuthorization { get; set; }

        /// <summary>
        /// Portfolio Group ID. Portfolio Groups have been deprecated. Please contact support if you have a usecase for it.
        /// </summary>
        /// <value>Portfolio Group ID. Portfolio Groups have been deprecated. Please contact support if you have a usecase for it.</value>
        [DataMember(Name = "portfolio_group", EmitDefaultValue = false)]
        [Obsolete]
        public string PortfolioGroup { get; set; }

        /// <summary>
        /// A display name for the account. Either assigned by the user or by the brokerage itself. For certain brokerages, SnapTrade appends the brokerage name to the account name for clarity.
        /// </summary>
        /// <value>A display name for the account. Either assigned by the user or by the brokerage itself. For certain brokerages, SnapTrade appends the brokerage name to the account name for clarity.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The account number assigned by the brokerage. For some brokerages, this field may be masked for security reasons.
        /// </summary>
        /// <value>The account number assigned by the brokerage. For some brokerages, this field may be masked for security reasons.</value>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// The name of the brokerage that holds the account.
        /// </summary>
        /// <value>The name of the brokerage that holds the account.</value>
        [DataMember(Name = "institution_name", EmitDefaultValue = false)]
        public string InstitutionName { get; set; }

        /// <summary>
        /// Timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format indicating when the account was created in SnapTrade. This is _not_ the account opening date at the brokerage.
        /// </summary>
        /// <value>Timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format indicating when the account was created in SnapTrade. This is _not_ the account opening date at the brokerage.</value>
        [DataMember(Name = "created_date", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Additional information about the account, such as account type, status, etc. This information is specific to the brokerage and there&#39;s no standard format for this data. Please use at your own risk.
        /// </summary>
        /// <value>Additional information about the account, such as account type, status, etc. This information is specific to the brokerage and there&#39;s no standard format for this data. Please use at your own risk.</value>
        [DataMember(Name = "meta", EmitDefaultValue = false)]
        [Obsolete]
        public Dictionary<string, Object> Meta { get; set; }

        /// <summary>
        /// This field is deprecated.
        /// </summary>
        /// <value>This field is deprecated.</value>
        [DataMember(Name = "cash_restrictions", EmitDefaultValue = false)]
        [Obsolete]
        public List<string> CashRestrictions { get; set; }

        /// <summary>
        /// Gets or Sets SyncStatus
        /// </summary>
        [DataMember(Name = "sync_status", EmitDefaultValue = false)]
        public AccountSyncStatus SyncStatus { get; set; }

        /// <summary>
        /// Gets or Sets Balance
        /// </summary>
        [DataMember(Name = "balance", EmitDefaultValue = false)]
        public AccountBalance Balance { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  BrokerageAuthorization: ").Append(BrokerageAuthorization).Append("\n");
            sb.Append("  PortfolioGroup: ").Append(PortfolioGroup).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  InstitutionName: ").Append(InstitutionName).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  CashRestrictions: ").Append(CashRestrictions).Append("\n");
            sb.Append("  SyncStatus: ").Append(SyncStatus).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Account);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="input">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.BrokerageAuthorization == input.BrokerageAuthorization ||
                    (this.BrokerageAuthorization != null &&
                    this.BrokerageAuthorization.Equals(input.BrokerageAuthorization))
                ) && base.Equals(input) && 
                (
                    this.PortfolioGroup == input.PortfolioGroup ||
                    (this.PortfolioGroup != null &&
                    this.PortfolioGroup.Equals(input.PortfolioGroup))
                ) && base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && base.Equals(input) && 
                (
                    this.InstitutionName == input.InstitutionName ||
                    (this.InstitutionName != null &&
                    this.InstitutionName.Equals(input.InstitutionName))
                ) && base.Equals(input) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && base.Equals(input) && 
                (
                    this.Meta == input.Meta ||
                    this.Meta != null &&
                    input.Meta != null &&
                    this.Meta.SequenceEqual(input.Meta)
                ) && base.Equals(input) && 
                (
                    this.CashRestrictions == input.CashRestrictions ||
                    this.CashRestrictions != null &&
                    input.CashRestrictions != null &&
                    this.CashRestrictions.SequenceEqual(input.CashRestrictions)
                ) && base.Equals(input) && 
                (
                    this.SyncStatus == input.SyncStatus ||
                    (this.SyncStatus != null &&
                    this.SyncStatus.Equals(input.SyncStatus))
                ) && base.Equals(input) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.BrokerageAuthorization != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerageAuthorization.GetHashCode();
                }
                if (this.PortfolioGroup != null)
                {
                    hashCode = (hashCode * 59) + this.PortfolioGroup.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Number != null)
                {
                    hashCode = (hashCode * 59) + this.Number.GetHashCode();
                }
                if (this.InstitutionName != null)
                {
                    hashCode = (hashCode * 59) + this.InstitutionName.GetHashCode();
                }
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.Meta != null)
                {
                    hashCode = (hashCode * 59) + this.Meta.GetHashCode();
                }
                if (this.CashRestrictions != null)
                {
                    hashCode = (hashCode * 59) + this.CashRestrictions.GetHashCode();
                }
                if (this.SyncStatus != null)
                {
                    hashCode = (hashCode * 59) + this.SyncStatus.GetHashCode();
                }
                if (this.Balance != null)
                {
                    hashCode = (hashCode * 59) + this.Balance.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
