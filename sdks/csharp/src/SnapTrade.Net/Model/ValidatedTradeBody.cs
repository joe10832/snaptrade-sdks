/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// ValidatedTradeBody
    /// </summary>
    [DataContract(Name = "ValidatedTradeBody")]
    public partial class ValidatedTradeBody : IEquatable<ValidatedTradeBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidatedTradeBody" /> class.
        /// </summary>
        /// <param name="waitToConfirm">Optional, defaults to true. Determines if a wait is performed to check on order status. If false, latency will be reduced but orders returned will be more likely to be of status &#x60;PENDING&#x60; as we will not wait to check on the status before responding to the request..</param>
        public ValidatedTradeBody(bool? waitToConfirm = default(bool?))
        {
            this.WaitToConfirm = waitToConfirm;
        }

        /// <summary>
        /// Optional, defaults to true. Determines if a wait is performed to check on order status. If false, latency will be reduced but orders returned will be more likely to be of status &#x60;PENDING&#x60; as we will not wait to check on the status before responding to the request.
        /// </summary>
        /// <value>Optional, defaults to true. Determines if a wait is performed to check on order status. If false, latency will be reduced but orders returned will be more likely to be of status &#x60;PENDING&#x60; as we will not wait to check on the status before responding to the request.</value>
        [DataMember(Name = "wait_to_confirm", EmitDefaultValue = true)]
        public bool? WaitToConfirm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidatedTradeBody {\n");
            sb.Append("  WaitToConfirm: ").Append(WaitToConfirm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidatedTradeBody);
        }

        /// <summary>
        /// Returns true if ValidatedTradeBody instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidatedTradeBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidatedTradeBody input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.WaitToConfirm == input.WaitToConfirm ||
                    (this.WaitToConfirm != null &&
                    this.WaitToConfirm.Equals(input.WaitToConfirm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WaitToConfirm != null)
                {
                    hashCode = (hashCode * 59) + this.WaitToConfirm.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
