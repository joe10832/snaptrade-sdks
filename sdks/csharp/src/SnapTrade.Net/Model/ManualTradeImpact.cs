/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// ManualTradeImpact
    /// </summary>
    [DataContract(Name = "ManualTradeImpact")]
    public partial class ManualTradeImpact : IEquatable<ManualTradeImpact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualTradeImpact" /> class.
        /// </summary>
        /// <param name="account">Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade..</param>
        /// <param name="currency">Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade..</param>
        /// <param name="remainingCash">Estimated amount of cash remaining in the account after the trade..</param>
        /// <param name="estimatedCommission">Estimated commission for the trade..</param>
        /// <param name="forexFees">Estimated foreign transaction fees for the trade..</param>
        public ManualTradeImpact(string account = default(string), string currency = default(string), double? remainingCash = default(double?), double? estimatedCommission = default(double?), double? forexFees = default(double?)) : base()
        {
            this.Account = account;
            this.Currency = currency;
            this.RemainingCash = remainingCash;
            this.EstimatedCommission = estimatedCommission;
            this.ForexFees = forexFees;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade.
        /// </summary>
        /// <value>Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade.</value>
        [DataMember(Name = "account", EmitDefaultValue = false)]
        public string Account { get; set; }

        /// <summary>
        /// Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade.
        /// </summary>
        /// <value>Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade.</value>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public string Currency { get; set; }

        /// <summary>
        /// Estimated amount of cash remaining in the account after the trade.
        /// </summary>
        /// <value>Estimated amount of cash remaining in the account after the trade.</value>
        [DataMember(Name = "remaining_cash", EmitDefaultValue = true)]
        public double? RemainingCash { get; set; }

        /// <summary>
        /// Estimated commission for the trade.
        /// </summary>
        /// <value>Estimated commission for the trade.</value>
        [DataMember(Name = "estimated_commission", EmitDefaultValue = true)]
        public double? EstimatedCommission { get; set; }

        /// <summary>
        /// Estimated foreign transaction fees for the trade.
        /// </summary>
        /// <value>Estimated foreign transaction fees for the trade.</value>
        [DataMember(Name = "forex_fees", EmitDefaultValue = true)]
        public double? ForexFees { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManualTradeImpact {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RemainingCash: ").Append(RemainingCash).Append("\n");
            sb.Append("  EstimatedCommission: ").Append(EstimatedCommission).Append("\n");
            sb.Append("  ForexFees: ").Append(ForexFees).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManualTradeImpact);
        }

        /// <summary>
        /// Returns true if ManualTradeImpact instances are equal
        /// </summary>
        /// <param name="input">Instance of ManualTradeImpact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManualTradeImpact input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && base.Equals(input) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && base.Equals(input) && 
                (
                    this.RemainingCash == input.RemainingCash ||
                    (this.RemainingCash != null &&
                    this.RemainingCash.Equals(input.RemainingCash))
                ) && base.Equals(input) && 
                (
                    this.EstimatedCommission == input.EstimatedCommission ||
                    (this.EstimatedCommission != null &&
                    this.EstimatedCommission.Equals(input.EstimatedCommission))
                ) && base.Equals(input) && 
                (
                    this.ForexFees == input.ForexFees ||
                    (this.ForexFees != null &&
                    this.ForexFees.Equals(input.ForexFees))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Account != null)
                {
                    hashCode = (hashCode * 59) + this.Account.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.RemainingCash != null)
                {
                    hashCode = (hashCode * 59) + this.RemainingCash.GetHashCode();
                }
                if (this.EstimatedCommission != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedCommission.GetHashCode();
                }
                if (this.ForexFees != null)
                {
                    hashCode = (hashCode * 59) + this.ForexFees.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
