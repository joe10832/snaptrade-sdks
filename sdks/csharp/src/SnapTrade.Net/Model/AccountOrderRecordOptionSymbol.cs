/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// Contains information about the option contract that the order is for. This field is only present for option orders. For stock/ETF/crypto/mutual fund orders, this field will be null and the &#x60;universal_symbol&#x60; field will be populated.
    /// </summary>
    [DataContract(Name = "AccountOrderRecord_option_symbol")]
    public partial class AccountOrderRecordOptionSymbol : IEquatable<AccountOrderRecordOptionSymbol>, IValidatableObject
    {
        /// <summary>
        /// The type of option. Either \&quot;CALL\&quot; or \&quot;PUT\&quot;.
        /// </summary>
        /// <value>The type of option. Either \&quot;CALL\&quot; or \&quot;PUT\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OptionTypeEnum
        {
            /// <summary>
            /// Enum CALL for value: CALL
            /// </summary>
            [EnumMember(Value = "CALL")]
            CALL = 1,

            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            [EnumMember(Value = "PUT")]
            PUT = 2

        }


        /// <summary>
        /// The type of option. Either \&quot;CALL\&quot; or \&quot;PUT\&quot;.
        /// </summary>
        /// <value>The type of option. Either \&quot;CALL\&quot; or \&quot;PUT\&quot;.</value>
        [DataMember(Name = "option_type", IsRequired = true, EmitDefaultValue = true)]
        public OptionTypeEnum OptionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountOrderRecordOptionSymbol" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountOrderRecordOptionSymbol() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountOrderRecordOptionSymbol" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the option symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls. (required).</param>
        /// <param name="ticker">The [OCC symbol](https://en.wikipedia.org/wiki/Option_symbol) for the option. (required).</param>
        /// <param name="optionType">The type of option. Either \&quot;CALL\&quot; or \&quot;PUT\&quot;. (required).</param>
        /// <param name="strikePrice">The option strike price. (required).</param>
        /// <param name="expirationDate">The option expiration date. (required).</param>
        /// <param name="isMiniOption">Whether the option is a mini option. Mini options have 10 underlying shares per contract instead of the standard 100..</param>
        /// <param name="underlyingSymbol">underlyingSymbol (required).</param>
        public AccountOrderRecordOptionSymbol(string id = default(string), string ticker = default(string), OptionTypeEnum optionType = default(OptionTypeEnum), double strikePrice = default(double), DateTime expirationDate = default(DateTime), bool isMiniOption = default(bool), UnderlyingSymbol underlyingSymbol = default(UnderlyingSymbol))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AccountOrderRecordOptionSymbol and cannot be null");
            }
            this.Id = id;
            // to ensure "ticker" is required (not null)
            if (ticker == null)
            {
                throw new ArgumentNullException("ticker is a required property for AccountOrderRecordOptionSymbol and cannot be null");
            }
            this.Ticker = ticker;
            this.OptionType = optionType;
            this.StrikePrice = strikePrice;
            this.ExpirationDate = expirationDate;
            // to ensure "underlyingSymbol" is required (not null)
            if (underlyingSymbol == null)
            {
                throw new ArgumentNullException("underlyingSymbol is a required property for AccountOrderRecordOptionSymbol and cannot be null");
            }
            this.UnderlyingSymbol = underlyingSymbol;
            this.IsMiniOption = isMiniOption;
        }

        /// <summary>
        /// Unique identifier for the option symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls.
        /// </summary>
        /// <value>Unique identifier for the option symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The [OCC symbol](https://en.wikipedia.org/wiki/Option_symbol) for the option.
        /// </summary>
        /// <value>The [OCC symbol](https://en.wikipedia.org/wiki/Option_symbol) for the option.</value>
        [DataMember(Name = "ticker", IsRequired = true, EmitDefaultValue = true)]
        public string Ticker { get; set; }

        /// <summary>
        /// The option strike price.
        /// </summary>
        /// <value>The option strike price.</value>
        [DataMember(Name = "strike_price", IsRequired = true, EmitDefaultValue = true)]
        public double StrikePrice { get; set; }

        /// <summary>
        /// The option expiration date.
        /// </summary>
        /// <value>The option expiration date.</value>
        [DataMember(Name = "expiration_date", IsRequired = true, EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Whether the option is a mini option. Mini options have 10 underlying shares per contract instead of the standard 100.
        /// </summary>
        /// <value>Whether the option is a mini option. Mini options have 10 underlying shares per contract instead of the standard 100.</value>
        [DataMember(Name = "is_mini_option", EmitDefaultValue = true)]
        public bool IsMiniOption { get; set; }

        /// <summary>
        /// Gets or Sets UnderlyingSymbol
        /// </summary>
        [DataMember(Name = "underlying_symbol", IsRequired = true, EmitDefaultValue = true)]
        public UnderlyingSymbol UnderlyingSymbol { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountOrderRecordOptionSymbol {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Ticker: ").Append(Ticker).Append("\n");
            sb.Append("  OptionType: ").Append(OptionType).Append("\n");
            sb.Append("  StrikePrice: ").Append(StrikePrice).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  IsMiniOption: ").Append(IsMiniOption).Append("\n");
            sb.Append("  UnderlyingSymbol: ").Append(UnderlyingSymbol).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountOrderRecordOptionSymbol);
        }

        /// <summary>
        /// Returns true if AccountOrderRecordOptionSymbol instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountOrderRecordOptionSymbol to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountOrderRecordOptionSymbol input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Ticker == input.Ticker ||
                    (this.Ticker != null &&
                    this.Ticker.Equals(input.Ticker))
                ) && 
                (
                    this.OptionType == input.OptionType ||
                    this.OptionType.Equals(input.OptionType)
                ) && 
                (
                    this.StrikePrice == input.StrikePrice ||
                    this.StrikePrice.Equals(input.StrikePrice)
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.IsMiniOption == input.IsMiniOption ||
                    this.IsMiniOption.Equals(input.IsMiniOption)
                ) && 
                (
                    this.UnderlyingSymbol == input.UnderlyingSymbol ||
                    (this.UnderlyingSymbol != null &&
                    this.UnderlyingSymbol.Equals(input.UnderlyingSymbol))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Ticker != null)
                {
                    hashCode = (hashCode * 59) + this.Ticker.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OptionType.GetHashCode();
                hashCode = (hashCode * 59) + this.StrikePrice.GetHashCode();
                if (this.ExpirationDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpirationDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsMiniOption.GetHashCode();
                if (this.UnderlyingSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.UnderlyingSymbol.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
