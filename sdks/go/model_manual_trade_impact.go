/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ManualTradeImpact struct for ManualTradeImpact
type ManualTradeImpact struct {
	// Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade.
	Account *string `json:"account,omitempty"`
	// Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade.
	Currency *string `json:"currency,omitempty"`
	// Estimated amount of cash remaining in the account after the trade.
	RemainingCash NullableFloat32 `json:"remaining_cash,omitempty"`
	// Estimated commission for the trade.
	EstimatedCommission NullableFloat32 `json:"estimated_commission,omitempty"`
	// Estimated foreign transaction fees for the trade.
	ForexFees NullableFloat32 `json:"forex_fees,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManualTradeImpact ManualTradeImpact

// NewManualTradeImpact instantiates a new ManualTradeImpact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualTradeImpact() *ManualTradeImpact {
	this := ManualTradeImpact{}
	return &this
}

// NewManualTradeImpactWithDefaults instantiates a new ManualTradeImpact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualTradeImpactWithDefaults() *ManualTradeImpact {
	this := ManualTradeImpact{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ManualTradeImpact) GetAccount() string {
	if o == nil || isNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTradeImpact) GetAccountOk() (*string, bool) {
	if o == nil || isNil(o.Account) {
    return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ManualTradeImpact) HasAccount() bool {
	if o != nil && !isNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *ManualTradeImpact) SetAccount(v string) {
	o.Account = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ManualTradeImpact) GetCurrency() string {
	if o == nil || isNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTradeImpact) GetCurrencyOk() (*string, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ManualTradeImpact) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *ManualTradeImpact) SetCurrency(v string) {
	o.Currency = &v
}

// GetRemainingCash returns the RemainingCash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTradeImpact) GetRemainingCash() float32 {
	if o == nil || isNil(o.RemainingCash.Get()) {
		var ret float32
		return ret
	}
	return *o.RemainingCash.Get()
}

// GetRemainingCashOk returns a tuple with the RemainingCash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTradeImpact) GetRemainingCashOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.RemainingCash.Get(), o.RemainingCash.IsSet()
}

// HasRemainingCash returns a boolean if a field has been set.
func (o *ManualTradeImpact) HasRemainingCash() bool {
	if o != nil && o.RemainingCash.IsSet() {
		return true
	}

	return false
}

// SetRemainingCash gets a reference to the given NullableFloat32 and assigns it to the RemainingCash field.
func (o *ManualTradeImpact) SetRemainingCash(v float32) {
	o.RemainingCash.Set(&v)
}
// SetRemainingCashNil sets the value for RemainingCash to be an explicit nil
func (o *ManualTradeImpact) SetRemainingCashNil() {
	o.RemainingCash.Set(nil)
}

// UnsetRemainingCash ensures that no value is present for RemainingCash, not even an explicit nil
func (o *ManualTradeImpact) UnsetRemainingCash() {
	o.RemainingCash.Unset()
}

// GetEstimatedCommission returns the EstimatedCommission field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTradeImpact) GetEstimatedCommission() float32 {
	if o == nil || isNil(o.EstimatedCommission.Get()) {
		var ret float32
		return ret
	}
	return *o.EstimatedCommission.Get()
}

// GetEstimatedCommissionOk returns a tuple with the EstimatedCommission field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTradeImpact) GetEstimatedCommissionOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.EstimatedCommission.Get(), o.EstimatedCommission.IsSet()
}

// HasEstimatedCommission returns a boolean if a field has been set.
func (o *ManualTradeImpact) HasEstimatedCommission() bool {
	if o != nil && o.EstimatedCommission.IsSet() {
		return true
	}

	return false
}

// SetEstimatedCommission gets a reference to the given NullableFloat32 and assigns it to the EstimatedCommission field.
func (o *ManualTradeImpact) SetEstimatedCommission(v float32) {
	o.EstimatedCommission.Set(&v)
}
// SetEstimatedCommissionNil sets the value for EstimatedCommission to be an explicit nil
func (o *ManualTradeImpact) SetEstimatedCommissionNil() {
	o.EstimatedCommission.Set(nil)
}

// UnsetEstimatedCommission ensures that no value is present for EstimatedCommission, not even an explicit nil
func (o *ManualTradeImpact) UnsetEstimatedCommission() {
	o.EstimatedCommission.Unset()
}

// GetForexFees returns the ForexFees field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTradeImpact) GetForexFees() float32 {
	if o == nil || isNil(o.ForexFees.Get()) {
		var ret float32
		return ret
	}
	return *o.ForexFees.Get()
}

// GetForexFeesOk returns a tuple with the ForexFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTradeImpact) GetForexFeesOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.ForexFees.Get(), o.ForexFees.IsSet()
}

// HasForexFees returns a boolean if a field has been set.
func (o *ManualTradeImpact) HasForexFees() bool {
	if o != nil && o.ForexFees.IsSet() {
		return true
	}

	return false
}

// SetForexFees gets a reference to the given NullableFloat32 and assigns it to the ForexFees field.
func (o *ManualTradeImpact) SetForexFees(v float32) {
	o.ForexFees.Set(&v)
}
// SetForexFeesNil sets the value for ForexFees to be an explicit nil
func (o *ManualTradeImpact) SetForexFeesNil() {
	o.ForexFees.Set(nil)
}

// UnsetForexFees ensures that no value is present for ForexFees, not even an explicit nil
func (o *ManualTradeImpact) UnsetForexFees() {
	o.ForexFees.Unset()
}

func (o ManualTradeImpact) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.RemainingCash.IsSet() {
		toSerialize["remaining_cash"] = o.RemainingCash.Get()
	}
	if o.EstimatedCommission.IsSet() {
		toSerialize["estimated_commission"] = o.EstimatedCommission.Get()
	}
	if o.ForexFees.IsSet() {
		toSerialize["forex_fees"] = o.ForexFees.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ManualTradeImpact) UnmarshalJSON(bytes []byte) (err error) {
	varManualTradeImpact := _ManualTradeImpact{}

	if err = json.Unmarshal(bytes, &varManualTradeImpact); err == nil {
		*o = ManualTradeImpact(varManualTradeImpact)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "remaining_cash")
		delete(additionalProperties, "estimated_commission")
		delete(additionalProperties, "forex_fees")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManualTradeImpact struct {
	value *ManualTradeImpact
	isSet bool
}

func (v NullableManualTradeImpact) Get() *ManualTradeImpact {
	return v.value
}

func (v *NullableManualTradeImpact) Set(val *ManualTradeImpact) {
	v.value = val
	v.isSet = true
}

func (v NullableManualTradeImpact) IsSet() bool {
	return v.isSet
}

func (v *NullableManualTradeImpact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualTradeImpact(val *ManualTradeImpact) *NullableManualTradeImpact {
	return &NullableManualTradeImpact{value: val, isSet: true}
}

func (v NullableManualTradeImpact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualTradeImpact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


