/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// UniversalSymbolExchange The exchange on which the security is listed and traded.
type UniversalSymbolExchange struct {
	// Unique ID for the exchange in SnapTrade.
	Id *string `json:"id,omitempty"`
	// A short name for the exchange. For standardized exchange code, please us the `mic_code` field.
	Code *string `json:"code,omitempty"`
	// The [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code) (MIC) for the exchange.
	MicCode *string `json:"mic_code,omitempty"`
	// The full name of the exchange.
	Name *string `json:"name,omitempty"`
	// The timezone for the trading hours (`start_time` and `close_time`) of the exchange.
	Timezone *string `json:"timezone,omitempty"`
	// The time when the exchange opens for trading.
	StartTime *string `json:"start_time,omitempty"`
	// The time when the exchange closes for trading.
	CloseTime *string `json:"close_time,omitempty"`
	// The suffix to be appended to the symbol when trading on this exchange. For example, the suffix for the Toronto Stock Exchange is `.TO`. See `UniversalSymbol->symbol` and `UniversalSymbol->raw_symbol` for more detail.
	Suffix NullableString `json:"suffix,omitempty"`
}

// NewUniversalSymbolExchange instantiates a new UniversalSymbolExchange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUniversalSymbolExchange() *UniversalSymbolExchange {
	this := UniversalSymbolExchange{}
	return &this
}

// NewUniversalSymbolExchangeWithDefaults instantiates a new UniversalSymbolExchange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUniversalSymbolExchangeWithDefaults() *UniversalSymbolExchange {
	this := UniversalSymbolExchange{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UniversalSymbolExchange) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalSymbolExchange) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UniversalSymbolExchange) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UniversalSymbolExchange) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UniversalSymbolExchange) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalSymbolExchange) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UniversalSymbolExchange) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *UniversalSymbolExchange) SetCode(v string) {
	o.Code = &v
}

// GetMicCode returns the MicCode field value if set, zero value otherwise.
func (o *UniversalSymbolExchange) GetMicCode() string {
	if o == nil || isNil(o.MicCode) {
		var ret string
		return ret
	}
	return *o.MicCode
}

// GetMicCodeOk returns a tuple with the MicCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalSymbolExchange) GetMicCodeOk() (*string, bool) {
	if o == nil || isNil(o.MicCode) {
    return nil, false
	}
	return o.MicCode, true
}

// HasMicCode returns a boolean if a field has been set.
func (o *UniversalSymbolExchange) HasMicCode() bool {
	if o != nil && !isNil(o.MicCode) {
		return true
	}

	return false
}

// SetMicCode gets a reference to the given string and assigns it to the MicCode field.
func (o *UniversalSymbolExchange) SetMicCode(v string) {
	o.MicCode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UniversalSymbolExchange) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalSymbolExchange) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UniversalSymbolExchange) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UniversalSymbolExchange) SetName(v string) {
	o.Name = &v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *UniversalSymbolExchange) GetTimezone() string {
	if o == nil || isNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalSymbolExchange) GetTimezoneOk() (*string, bool) {
	if o == nil || isNil(o.Timezone) {
    return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *UniversalSymbolExchange) HasTimezone() bool {
	if o != nil && !isNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *UniversalSymbolExchange) SetTimezone(v string) {
	o.Timezone = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *UniversalSymbolExchange) GetStartTime() string {
	if o == nil || isNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalSymbolExchange) GetStartTimeOk() (*string, bool) {
	if o == nil || isNil(o.StartTime) {
    return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *UniversalSymbolExchange) HasStartTime() bool {
	if o != nil && !isNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *UniversalSymbolExchange) SetStartTime(v string) {
	o.StartTime = &v
}

// GetCloseTime returns the CloseTime field value if set, zero value otherwise.
func (o *UniversalSymbolExchange) GetCloseTime() string {
	if o == nil || isNil(o.CloseTime) {
		var ret string
		return ret
	}
	return *o.CloseTime
}

// GetCloseTimeOk returns a tuple with the CloseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UniversalSymbolExchange) GetCloseTimeOk() (*string, bool) {
	if o == nil || isNil(o.CloseTime) {
    return nil, false
	}
	return o.CloseTime, true
}

// HasCloseTime returns a boolean if a field has been set.
func (o *UniversalSymbolExchange) HasCloseTime() bool {
	if o != nil && !isNil(o.CloseTime) {
		return true
	}

	return false
}

// SetCloseTime gets a reference to the given string and assigns it to the CloseTime field.
func (o *UniversalSymbolExchange) SetCloseTime(v string) {
	o.CloseTime = &v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UniversalSymbolExchange) GetSuffix() string {
	if o == nil || isNil(o.Suffix.Get()) {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UniversalSymbolExchange) GetSuffixOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *UniversalSymbolExchange) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *UniversalSymbolExchange) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *UniversalSymbolExchange) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *UniversalSymbolExchange) UnsetSuffix() {
	o.Suffix.Unset()
}

func (o UniversalSymbolExchange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.MicCode) {
		toSerialize["mic_code"] = o.MicCode
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	if !isNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !isNil(o.CloseTime) {
		toSerialize["close_time"] = o.CloseTime
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUniversalSymbolExchange struct {
	value *UniversalSymbolExchange
	isSet bool
}

func (v NullableUniversalSymbolExchange) Get() *UniversalSymbolExchange {
	return v.value
}

func (v *NullableUniversalSymbolExchange) Set(val *UniversalSymbolExchange) {
	v.value = val
	v.isSet = true
}

func (v NullableUniversalSymbolExchange) IsSet() bool {
	return v.isSet
}

func (v *NullableUniversalSymbolExchange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUniversalSymbolExchange(val *UniversalSymbolExchange) *NullableUniversalSymbolExchange {
	return &NullableUniversalSymbolExchange{value: val, isSet: true}
}

func (v NullableUniversalSymbolExchange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUniversalSymbolExchange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


